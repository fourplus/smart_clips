;THIS IS TEST COMMIT;;*************;;* TEMPLATES *;;*************(deftemplate phone ; specifications (slot brand (type SYMBOL) (default NIL)) (slot model (type SYMBOL) (default NIL)) (slot color (type SYMBOL) (default NIL)) (slot weight (type INTEGER) (default 0)) (slot mem-int (type INTEGER) (default 0)) (slot mem-ext (type INTEGER) (default 0))  (slot screensize (type INTEGER) (default 0)) ; L x B ; features (slot os (type SYMBOL)) (slot version (type SYMBOL)) ; should we include? just assume version won't matter?  (slot bluetooth	 (type SYMBOL) (allowed-values yes no) (default no)) (slot wifi (type SYMBOL) (allowed-values yes no) (default no)) (slot fm (type SYMBOL) (allowed-values yes no) (default no)) ; camera (slot zoom (type INTEGER) (default 0)) (slot pixel (type INTEGER)) (slot flash (type SYMBOL) (allowed-values yes no) (default no)) (slot videoHD (type INTEGER) (default 0)) ; L x B   (slot price (type INTEGER) (default 0)) (slot weightage (type FLOAT) (default 1.0)))(deftemplate requirement	(slot name (type SYMBOL))	(slot value (type INTEGER) (default 0)) (slot sym-val (type SYMBOL) (default NIL))	(slot weightage (type FLOAT)(default 1.0)));;*********;;* FACTS *;;*********(deffacts init-phone-facts  (phone (model iphone)(zoom 4)(pixel 1)(color red)  (weight 100))  (phone (model N3310) (zoom 3)(pixel 2)(color blue) (weight 150))  (phone (model E330i) (zoom 2)(pixel 3)(color green)(weight 110))  (phone (model S3310) (zoom 1)(pixel 4)(color black)(weight 130)))(deffacts user-phone-preference  (requirement (name up-zoom)  (value 4)    (weightage 100))  (requirement (name up-pixel) (value 4)    (weightage 100))  (requirement (name up-color) (value green)(weightage 100))  (requirement (name up-weight)(value 110)  (weightage 100)));;*********;;* RULES *;;*********(defrule combine-weightage  ?rem1 <- (requirement (name ?attribute)(value ?val)(weightage ?weightage1))  ?rem2 <- (requirement (name ?attribute)(value ?val)(weightage ?weightage2))  (test (neq ?rem1 ?rem2))  =>  (retract ?rem1)  (modify ?rem2 (weightage (round (/ (+ ?weightage1 ?weightage2) 2)))))(defrule calculate-weightage  ?phone <- (phone (model ?name)(zoom ?best-cz)(pixel ?best-cp)(color ?best-cc)(weight ?best-cw)(weightage ?weightage))  (requirement (name zoom)  (value ?best-cz)(weightage ?weightage-cz))  (requirement (name pixel) (value ?best-cp)(weightage ?weightage-cp))  (requirement (name color) (value ?best-cc)(weightage ?weightage-cc))  (requirement (name weight)(value ?best-cw)(weightage ?weightage-cw))  =>  (bind ?new-weightage (min ?weightage-cz ?weightage-cp ?weightage-cc ?weightage-cw))  (modify ?phone (weightage ?new-weightage)));;*******************;;* ATTRIBUTE RULES *;;*******************(defrule pricerange=> (printout t "What is your budget?: ") (bind ?n (read)) (assert (requirement (name price) (value ?n) (weightage 1.0)));AFTER LAST RULE set (askperson) to start asking personality (assert (askperson))) ;;*********************;;* PERSONALITY RULES *;;*********************(defrule age    ;(askperson) ?req <- (requirement (name price) (weightage ?w))=>  (printout t "What is your age? (1. below 18; 2. 18-25; 3. 26-40; 4. above 40): ") (bind ?n (read)) (switch ?n (case 1 then (modify ?req (weightage (+ ?w 1))))    (case 2 then (modify ?req (weightage (+ ?w 0.75))))    (case 3 then (modify ?req (weightage (+ ?w 0.5))))	   (case 4 then (modify ?req (weightage (+ ?w 0.25))))))(defrule job-related (askperson) ?ph <- (phone (brand samsung|apple) (weightage ?w))=>  (printout t "Do you use your mobile phone for job-related activities? (1. Yes; 2. No): ") (bind ?n (read)) (switch ?n (case 1 then (modify ?ph (weightage (+ ?w 1))))));;*************;;* FUNCTIONS *;;*************(deffunction get-mobilephone-list ()  (bind ?facts (find-all-facts((?p phone)) TRUE))) (deffunction get-requirement-list ()  (bind ?facts (find-all-facts((?p requirement)) TRUE)))